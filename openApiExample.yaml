# Versión de OpenAPI
openapi: 3.1.1

# Información básica de la API
info:
  title: API de Ejemplo
  description:
    Esta es una API de ejemplo que muestra la estructura básica de un documento OpenAPI.
    Incluye ejemplos de endpoints, modelos de datos y autenticación.
  version: 1.0.0
  contact:
    name: Rafael Vera
    email: rafaelvera205@gmail.com

# Servidores disponibles
servers:
  - url: https://api.ejemplo.com/v1
    description: Servidor de producción
  - url: https://staging-api.ejemplo.com/v1
    description: Servidor de pruebas

# Componentes reutilizables
components:
	# Esquemas de datos
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
        email:
          type: string
          format: email
        activo:
          type: boolean
          default: true
      required:
        - nombre
        - email

	# Configuración de la seguridad
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# Rutas de la API
paths:
  /usuarios:
  	# Método GET para obtener usuarios
    get:
      summary: Obtener lista de usuarios
      description: Retorna una lista paginada de usuarios
      security:
        - BearerAuth: []
      parameters:
        - name: pagina
          in: query
          description: Número de página
          required: false
          schema:
            type: integer
            default: 1
        - name: limite
          in: query
          description: Cantidad de elementos por página
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
              	type: array
              	items:
                	$ref: '#/components/schemas/Usuario'
        '401':
          description: No autorizado
        '500':
          description: Error en el servidor

		# Método POST para crear usuario
    post:
      summary: Crear nuevo usuarios    	
      description: Crea un nuevo usuario en el sistema
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: Datos inválidos
        '401':
          description: No autorizado
        '500':
          description: Error en el servidor

  /usuarios/{id}:
  	# Parámetros de ruta
    parameters:
      - name: id
        in: path
        required: true
        description: ID del usuario
        schema:
          type: integer
          format: int64

    # Método GET para obtener un usuario específico
    get:
      summary: Obtener usuario por ID
      description: Retorna la información de un usuario específico
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Usuario encontrado
          content:
          	application/json:
          		schema:
          			$ref: '#/components/schemas/Usuario'
        '404':
          description: Usuario no encontrado
        '500':
          description: Error en el servidor
```# Versión de OpenAPI

openapi: 3.0.0



\# Información básica de la API

info:

&#x20; title: API de Ejemplo

&#x20; description:

&#x20;   Esta es una API de ejemplo que muestra la estructura básica de un documento OpenAPI.

&#x20;   Incluye ejemplos de endpoints, modelos de datos y autenticación.

&#x20; version: 1.0.0

&#x20; contact:

&#x20;   name: Equipo de Soporte

&#x20;   email: <soporte@ejemplo.com>



\# Servidores disponibles

servers:

&#x20; \- url: <https://api.ejemplo.com/v1>

&#x20;   description: Servidor de producción

&#x20; \- url: <https://staging-api.ejemplo.com/v1>

&#x20;   description: Servidor de pruebas



\# Componentes reutilizables

components:

&#x9;\# Esquemas de datos

&#x20; schemas:

&#x20;   Usuario:

&#x20;     type: object

&#x20;     properties:

&#x20;       id:

&#x20;         type: integer

&#x20;         format: int64

&#x20;       nombre:

&#x20;         type: string

&#x20;       email:

&#x20;         type: string

&#x20;         format: email

&#x20;       activo:

&#x20;         type: boolean

&#x20;         default: true

&#x20;     required:

&#x20;       \- nombre

&#x20;       \- email



&#x9;\# Configuración de la seguridad

&#x20; securitySchemes:

&#x20;   BearerAuth:

&#x20;     type: http

&#x20;     scheme: bearer

&#x20;     bearerFormat: JWT



\# Rutas de la API

paths:

&#x20; /usuarios:

&#x20; 	\# Método GET para obtener usuarios

&#x20;   get:

&#x20;     summary: Obtener lista de usuarios

&#x20;     description: Retorna una lista paginada de usuarios

&#x20;     security:

&#x20;       \- BearerAuth: \[]

&#x20;     parameters:

&#x20;       \- name: pagina

&#x20;         in: query

&#x20;         description: Número de página

&#x20;         required: false

&#x20;         schema:

&#x20;           type: integer

&#x20;           default: 1

&#x20;       \- name: limite

&#x20;         in: query

&#x20;         description: Cantidad de elementos por página

&#x20;         required: false

&#x20;         schema:

&#x20;           type: integer

&#x20;           default: 10

&#x20;     responses:

&#x20;       '200':

&#x20;         description: Lista de usuarios obtenida exitosamente

&#x20;         content:

&#x20;           application/json:

&#x20;             schema:

&#x20;             	type: array

&#x20;             	items:

&#x20;               	$ref: '#/components/schemas/Usuario'

&#x20;       '401':

&#x20;         description: No autorizado

&#x20;       '500':

&#x20;         description: Error en el servidor



&#x9;	\# Método POST para crear usuario

&#x20;   post:

&#x20;     summary: Crear nuevo usuarios    &#x9;

&#x20;     description: Crea un nuevo usuario en el sistema

&#x20;     security:

&#x20;       \- BearerAuth: \[]

&#x20;     requestBody:

&#x20;       required: true

&#x20;       content:

&#x20;         application/json:

&#x20;           schema:

&#x20;             $ref: '#/components/schemas/Usuario'

&#x20;     responses:

&#x20;       '201':

&#x20;         description: Usuario creado exitosamente

&#x20;         content:

&#x20;           application/json:

&#x20;             schema:

&#x20;               $ref: '#/components/schemas/Usuario'

&#x20;       '400':

&#x20;         description: Datos inválidos

&#x20;       '401':

&#x20;         description: No autorizado

&#x20;       '500':

&#x20;         description: Error en el servidor



&#x20; /usuarios/{id}:

&#x20; 	\# Parámetros de ruta

&#x20;   parameters:

&#x20;     \- name: id

&#x20;       in: path

&#x20;       required: true

&#x20;       description: ID del usuario

&#x20;       schema:

&#x20;         type: integer

&#x20;         format: int64



&#x20;   \# Método GET para obtener un usuario específico

&#x20;   get:

&#x20;     summary: Obtener usuario por ID

&#x20;     description: Retorna la información de un usuario específico

&#x20;     security:

&#x20;       \- BearerAuth: \[]

&#x20;     responses:

&#x20;       '200':

&#x20;         description: Usuario encontrado

&#x20;         content:

&#x20;         	application/json:

&#x20;         		schema:

&#x20;         			$ref: '#/components/schemas/Usuario'

&#x20;       '404':

&#x20;         description: Usuario no encontrado

&#x20;       '500':

&#x20;         description: Error en el servidor